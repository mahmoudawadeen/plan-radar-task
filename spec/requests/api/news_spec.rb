require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/news/:city", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Api::NotificationRegistration. As you add validations to Api::NotificationRegistration, be sure to
  # adjust the attributes here as well.
  let(:api_token) { Api::AccessToken.create!.token }
  let(:city) { 'vienna' }
  let(:valid_headers) {
    {
      Authorization: "Token token=#{api_token}"
    }
  }
  describe 'GET /' do
    let(:news) {["news"]}
    let(:weather){["weather"]}

    it "calls headline and weather service" do
      expect(HeadlinesService).to receive(:call).with(city)
      expect(WeatherService).to receive(:call).with(city)
      get api_news_path(city: city), headers: valid_headers, as: :json
    end
    it "forwards the response from headline and weather service" do
      expect(HeadlinesService).to receive(:call).with(city).and_return(news)
      expect(WeatherService).to receive(:call).with(city).and_return(weather)

      get api_news_path(city: city), headers: valid_headers, as: :json

      body = JSON.parse(response.body)
      expect(body['latest_news']).to eq(news)
      expect(body['weather']).to eq(weather)
    end
    it "includes the city queried in response"do
      expect(HeadlinesService).to receive(:call).with(city)
      expect(WeatherService).to receive(:call).with(city)

      get api_news_path(city: city), headers: valid_headers, as: :json

      body = JSON.parse(response.body)
      expect(body['city']).to eq(city)
    end
  end
end
