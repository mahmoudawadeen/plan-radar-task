require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/news/:city", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Api::NotificationRegistration. As you add validations to Api::NotificationRegistration, be sure to
  # adjust the attributes here as well.
  let(:api_token) { Api::AccessToken.create!.token }

  let(:city) { "vienna" }

  let(:valid_attributes) {
    {
      name: "Jon Doe",
      mail: "jon@doe.com",
      mobile: "+43660000000",
      notification_method: "mobile",
      notification_frequency: "1h",
      city: city
    }
  }

  let(:invalid_attributes) {
    {
      name: "Jon Doe",
      mail: "jon@doe.com",
      notification_method: "mobile",
      notification_frequency: "1h",
      city: city
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::NotificationRegistrationsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {
      Authorization: "Token token=#{api_token}"
    }
  }
  let(:invalid_headers) {
    {
      Authorization: "Token token=I'm not a token"
    }
  }

  describe "POST /register" do
    context "with valid parameters" do
      it "creates a new Api::NotificationRegistration" do
        expect {
          post api_v1_registration_url(city: city),
               params: valid_attributes, headers: valid_headers, as: :json
        }.to change(Api::NotificationRegistration, :count).by(1)
      end

      it "renders a JSON response with the new api_notification_registration" do
        post api_v1_registration_url(city: city),
             params: valid_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(JSON.parse(response.body)).to include('deregistration_url')
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the new api_notification_registration" do
        expect {
          post api_v1_registration_url(city: city), params: invalid_attributes, headers: valid_headers, as: :json
        }.to raise_error ActionController::BadRequest
        expect(Api::NotificationRegistration.count).to eq(0)
      end
    end
  end

  describe "PUT /register" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Jon Doe",
          mail: "jon@doe.com",
          mobile: "+43660000000",
          notification_method: "mobile",
          notification_frequency: "3h"
        }
      }

      it "updates the requested api_notification_registration" do
        notification_registration = Api::NotificationRegistration.create! valid_attributes
        put api_v1_registration_url(notification_registration),
            params: new_attributes, headers: valid_headers, as: :json
        notification_registration.reload
        expect(notification_registration.notification_method).to eq(new_attributes[:notification_method])
      end

      it "renders a JSON response with the api_notification_registration" do
        notification_registration = Api::NotificationRegistration.create! valid_attributes
        put api_v1_registration_url(notification_registration),
            params: new_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the api_notification_registration" do
        notification_registration = Api::NotificationRegistration.create! valid_attributes
        expect {
          put api_v1_registration_url(notification_registration),
              params: invalid_attributes, headers: valid_headers, as: :json
        }.to raise_error ActionController::BadRequest
      end
    end
  end

  describe "DELETE /deregister" do
    it "destroys the requested Api::NotificationRegistration" do
      notification_registration = Api::NotificationRegistration.create! valid_attributes
      expect {
        delete api_v1_deregistration_url({ city: notification_registration.city, id: notification_registration.id }),
               headers: valid_headers, as: :json
      }.to change(Api::NotificationRegistration, :count).by(-1)
    end
  end

  describe "Unauthorized access" do
    it "to create a new Api::NotificationRegistration" do
      expect {
        post api_v1_registration_url(city: city),
             params: valid_attributes, headers: invalid_headers, as: :json
      }.to change(Api::NotificationRegistration, :count).by(0)
      expect(response).to have_http_status(:unauthorized)
    end
    it "to update a Api::NotificationRegistration" do
      notification_registration = Api::NotificationRegistration.create! valid_attributes
      put api_v1_registration_url(notification_registration),
          params: valid_attributes, headers: invalid_headers, as: :json
      expect(response).to have_http_status(:unauthorized)
    end
    it "to destroy the Api::NotificationRegistration " do
      notification_registration = Api::NotificationRegistration.create! valid_attributes
      expect {
        delete api_v1_deregistration_url({ city: notification_registration.city, id: notification_registration.id }),
               headers: invalid_headers, as: :json
      }.to change(Api::NotificationRegistration, :count).by(0)
      expect(response).to have_http_status(:unauthorized)
    end
  end
end
